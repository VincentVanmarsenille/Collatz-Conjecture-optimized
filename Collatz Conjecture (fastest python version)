from functools import lru_cache,cache
from time import perf_counter
from numba import jit,njit


@lru_cache(maxsize=None)  # dangerous!! Can cause your pc to run out of RAM for higher numbers
@jit
def collatz(num):
    if (num == 1):
        return 0

    if (num % 2 == 0):
        count = collatz(num // 2)
    else:
        count = collatz(num * 3 + 1)
    return 1 + count                   


def main():
    data = {}
    for n in range(1, 10000000 + 1):
        data[n] = collatz(n)

    assert data[1] == 0           # Assert throws error if following statement is not true
    assert data[4] == 2
    assert data[27] == 111


if __name__ == '__main__':
    start=perf_counter()
    main()
    stop=perf_counter()
    print("Function executed in ",stop-start,' seconds.')
    start = perf_counter()
    main()
    stop = perf_counter()
    print("Function executed in ", stop - start, ' seconds.')
