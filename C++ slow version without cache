#include <iostream>
#include <cassert>
#include <map>
#include <type_traits>
#include <chrono>
#include <omp.h>
#include <vector>
#include <thread>
#define NUM_THREADS 4


using namespace std::chrono;


// Open MP is used for parallelism within a multicore node for shared memory between the threads


int Collatz(long long int num)
{

    int count;
    if (num == 1)
    {
        return 0;
    }

    if (num % 2 == 0)
    {
        count = Collatz(num / 2);
    }

    else
    {
        count = Collatz(num * 3 + 1);
    }

    return 1 + count;
}

std::vector<int> data_vector(const long long int maxnumber)
{
    std::vector<int> data;
    data.reserve(maxnumber);

    for (int i = 0; i < maxnumber + 1; i++)
    {
        data.push_back(0);
    }
    return data;
}



void Execute_Collatz(const long long int maxnumber, std::vector<int>& data)
{


#pragma omp parallel for num_threads(14)
    for (long long int num = 1; num < maxnumber + 1; num++)
    {
        data[num] = Collatz(num);
    }


    assert(data[1] == 0);
    assert(data[4] == 2);
    assert(data[27] == 111);

}


void mp_info()
{
    std::cout << "Executed by thread " << omp_get_thread_num() << ". Total amount of threads: " << omp_get_num_threads() << "." << std::endl;
}

int main()
{
    omp_set_dynamic(0);
    omp_set_num_threads(NUM_THREADS);

    std::cout << "Up to which number do you want to calculate the Collatz Conjecture?" << std::endl;
    long long int maxnumber;
    std::cin >> maxnumber;

    std::vector<int> data = data_vector(maxnumber);

    auto start = high_resolution_clock::now();

    Execute_Collatz(maxnumber, data);

    auto stop = high_resolution_clock::now();
    auto duration = duration_cast<microseconds>(stop - start);
    std::cout << "Calculated Collatz Conjecture up to " << maxnumber << " in " << duration.count() << " microseconds." << std::endl;

    auto start2 = high_resolution_clock::now();

    Execute_Collatz(maxnumber, data);

    auto stop2 = high_resolution_clock::now();
    auto duration2 = duration_cast<microseconds>(stop2 - start2);
    std::cout << "Calculated Collatz Conjecture up to " << maxnumber << " in " << duration2.count() << " microseconds." << std::endl;
}
