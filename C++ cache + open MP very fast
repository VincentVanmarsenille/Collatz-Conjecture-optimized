#include <iostream>
#include <unordered_map>
#include <chrono>
#include <omp.h>
#include <cstdlib>

int* mem;
long long int size = 0;
// returns amount of steps to reach 1
int Collatz(long long int n) {
    if (n < size && mem[n] != 0)
    {
        return mem[n];
    }

    if (n == 1)
    {
        return 0;
    }
    else if (n % 2 == 0)
    {
        return 1 + Collatz(n / 2);
    }
    else
    {
        return 1 + Collatz(3 * n + 1);
    }
}

void ExeCollatz() 
{
    int longestChain = 0;
    long long int longestChainNum = 0;
    auto start = std::chrono::system_clock::now();
    #pragma omp parallel for num_threads(14)
    for (long long int i = 1; i <= size; i++) 
    {

        int result = Collatz(i);
        if (result > longestChain)
        {
            longestChain = result;
            longestChainNum = i;
        }
        mem[i] = result;
    }
    auto end = std::chrono::system_clock::now();
    auto elapsed = std::chrono::duration_cast<std::chrono::milliseconds>(end - start);
    std::cout << "size: " << size << "\n";
    std::cout << "time: " << elapsed.count() << "ms \n";
    std::cout << "longest chain: " << longestChain << " Number: " << longestChainNum << "\n";
}
int main() 
{
    size = 1000000;
    mem = new int [size] {0};
    ExeCollatz();
    delete[] mem;
}
